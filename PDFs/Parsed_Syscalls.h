/* http://www.metasploit.com/users/opcode/syscalls.html */
/* File generated by chaplja - chaplja.blogspot.com */

enum win_functions_s {
	NTACCEPTCONNECTPORT,
	NTACCESSCHECK,
	NTACCESSCHECKANDAUDITALARM,
	NTADDATOM,
	NTADJUSTGROUPSTOKEN,
	NTADJUSTPRIVILEGESTOKEN,
	NTALERTRESUMETHREAD,
	NTALERTTHREAD,
	NTALLOCATELOCALLYUNIQUEID,
	NTALLOCATEUUIDS,
	NTALLOCATEVIRTUALMEMORY,
	NTCALLBACKRETURN,
	NTCANCELIOFILE,
	NTCANCELTIMER,
	NTCLEAREVENT,
	NTCLOSE,
	NTCLOSEOBJECTAUDITALARM,
	NTCOMPLETECONNECTPORT,
	NTCONNECTPORT,
	NTCONTINUE,
	NTCREATEDIRECTORYOBJECT,
	NTCREATEEVENT,
	NTCREATEEVENTPAIR,
	NTCREATEFILE,
	NTCREATEIOCOMPLETION,
	NTCREATEKEY,
	NTCREATEMAILSLOTFILE,
	NTCREATEMUTANT,
	NTCREATENAMEDPIPEFILE,
	NTCREATEPAGINGFILE,
	NTCREATEPORT,
	NTCREATEPROCESS,
	NTCREATEPROFILE,
	NTCREATESECTION,
	NTCREATESEMAPHORE,
	NTCREATESYMBOLICLINKOBJECT,
	NTCREATETHREAD,
	NTCREATETIMER,
	NTCREATETOKEN,
	NTDELAYEXECUTION,
	NTDELETEATOM,
	NTDELETEFILE,
	NTDELETEKEY,
	NTDELETEOBJECTAUDITALARM,
	NTDELETEVALUEKEY,
	NTDEVICEIOCONTROLFILE,
	NTDISPLAYSTRING,
	NTDUPLICATEOBJECT,
	NTDUPLICATETOKEN,
	NTENUMERATEKEY,
	NTENUMERATEVALUEKEY,
	NTEXTENDSECTION,
	NTFINDATOM,
	NTFLUSHBUFFERSFILE,
	NTFLUSHINSTRUCTIONCACHE,
	NTFLUSHKEY,
	NTFLUSHVIRTUALMEMORY,
	NTFLUSHWRITEBUFFER,
	NTFREEVIRTUALMEMORY,
	NTFSCONTROLFILE,
	NTGETCONTEXTTHREAD,
	NTGETPLUGPLAYEVENT,
	NTIMPERSONATECLIENTOFPORT,
	NTIMPERSONATETHREAD,
	NTINITIALIZEREGISTRY,
	NTLISTENPORT,
	NTLOADDRIVER,
	NTLOADKEY,
	NTLOADKEY2,
	NTLOCKFILE,
	NTLOCKVIRTUALMEMORY,
	NTMAKETEMPORARYOBJECT,
	NTMAPVIEWOFSECTION,
	NTNOTIFYCHANGEDIRECTORYFILE,
	NTNOTIFYCHANGEKEY,
	NTOPENDIRECTORYOBJECT,
	NTOPENEVENT,
	NTOPENEVENTPAIR,
	NTOPENFILE,
	NTOPENIOCOMPLETION,
	NTOPENKEY,
	NTOPENMUTANT,
	NTOPENOBJECTAUDITALARM,
	NTOPENPROCESS,
	NTOPENPROCESSTOKEN,
	NTOPENSECTION,
	NTOPENSEMAPHORE,
	NTOPENSYMBOLICLINKOBJECT,
	NTOPENTHREAD,
	NTOPENTHREADTOKEN,
	NTOPENTIMER,
	NTPLUGPLAYCONTROL,
	NTPRIVILEGECHECK,
	NTPRIVILEGEOBJECTAUDITALARM,
	NTPRIVILEGEDSERVICEAUDITALARM,
	NTPROTECTVIRTUALMEMORY,
	NTPULSEEVENT,
	NTQUERYATTRIBUTESFILE,
	NTQUERYDEFAULTLOCALE,
	NTQUERYDIRECTORYFILE,
	NTQUERYDIRECTORYOBJECT,
	NTQUERYEAFILE,
	NTQUERYEVENT,
	NTQUERYFULLATTRIBUTESFILE,
	NTQUERYINFORMATIONATOM,
	NTQUERYINFORMATIONFILE,
	NTQUERYINFORMATIONPORT,
	NTQUERYINFORMATIONPROCESS,
	NTQUERYINFORMATIONTHREAD,
	NTQUERYINFORMATIONTOKEN,
	NTQUERYINTERVALPROFILE,
	NTQUERYIOCOMPLETION,
	NTQUERYKEY,
	NTQUERYMULTIPLEVALUEKEY,
	NTQUERYMUTANT,
	NTQUERYOBJECT,
	NTQUERYPERFORMANCECOUNTER,
	NTQUERYSECTION,
	NTQUERYSECURITYOBJECT,
	NTQUERYSEMAPHORE,
	NTQUERYSYMBOLICLINKOBJECT,
	NTQUERYSYSTEMENVIRONMENTVALUE,
	NTQUERYSYSTEMINFORMATION,
	NTQUERYSYSTEMTIME,
	NTQUERYTIMER,
	NTQUERYTIMERRESOLUTION,
	NTQUERYVALUEKEY,
	NTQUERYVIRTUALMEMORY,
	NTQUERYVOLUMEINFORMATIONFILE,
	NTQUEUEAPCTHREAD,
	NTRAISEEXCEPTION,
	NTRAISEHARDERROR,
	NTREADFILE,
	NTREADFILESCATTER,
	NTREADREQUESTDATA,
	NTREADVIRTUALMEMORY,
	NTREGISTERTHREADTERMINATEPORT,
	NTRELEASEMUTANT,
	NTRELEASESEMAPHORE,
	NTREMOVEIOCOMPLETION,
	NTREPLACEKEY,
	NTREPLYPORT,
	NTREPLYWAITRECEIVEPORT,
	NTREPLYWAITREPLYPORT,
	NTREQUESTPORT,
	NTREQUESTWAITREPLYPORT,
	NTRESETEVENT,
	NTRESTOREKEY,
	NTRESUMETHREAD,
	NTSAVEKEY,
	NTSETCONTEXTTHREAD,
	NTSETDEFAULTHARDERRORPORT,
	NTSETDEFAULTLOCALE,
	NTSETEAFILE,
	NTSETEVENT,
	NTSETHIGHEVENTPAIR,
	NTSETHIGHWAITLOWEVENTPAIR,
	NTSETINFORMATIONFILE,
	NTSETINFORMATIONKEY,
	NTSETINFORMATIONOBJECT,
	NTSETINFORMATIONPROCESS,
	NTSETINFORMATIONTHREAD,
	NTSETINFORMATIONTOKEN,
	NTSETINTERVALPROFILE,
	NTSETIOCOMPLETION,
	NTSETLDTENTRIES,
	NTSETLOWEVENTPAIR,
	NTSETLOWWAITHIGHEVENTPAIR,
	NTSETSECURITYOBJECT,
	NTSETSYSTEMENVIRONMENTVALUE,
	NTSETSYSTEMINFORMATION,
	NTSETSYSTEMPOWERSTATE,
	NTSETSYSTEMTIME,
	NTSETTIMER,
	NTSETTIMERRESOLUTION,
	NTSETVALUEKEY,
	NTSETVOLUMEINFORMATIONFILE,
	NTSHUTDOWNSYSTEM,
	NTSIGNALANDWAITFORSINGLEOBJECT,
	NTSTARTPROFILE,
	NTSTOPPROFILE,
	NTSUSPENDTHREAD,
	NTSYSTEMDEBUGCONTROL,
	NTTERMINATEPROCESS,
	NTTERMINATETHREAD,
	NTTESTALERT,
	NTUNLOADDRIVER,
	NTUNLOADKEY,
	NTUNLOCKFILE,
	NTUNLOCKVIRTUALMEMORY,
	NTUNMAPVIEWOFSECTION,
	NTVDMCONTROL,
	NTWAITFORMULTIPLEOBJECTS,
	NTWAITFORSINGLEOBJECT,
	NTWAITHIGHEVENTPAIR,
	NTWAITLOWEVENTPAIR,
	NTWRITEFILE,
	NTWRITEFILEGATHER,
	NTWRITEREQUESTDATA,
	NTWRITEVIRTUALMEMORY,
	NTYIELDEXECUTION,
	NT_MAX_FUNCTIONS
};
enum win_versions_s {
	WV_NT,
	WV_2000,
	WV_XP,
	WV_2003S,
	WV_VISTA,
	WV_MAX_VERSIONS
};
unsigned int function_ids[201][WV_MAX_VERSIONS] = {
	{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }, /* NtAcceptConnectPort */
	{ 0x0001, 0x0001, 0x0001, 0x0001, 0x0001 }, /* NtAccessCheck */
	{ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002 }, /* NtAccessCheckAndAuditAlarm */
	{ 0x0003, 0x0008, 0x0008, 0x0008, 0x0008 }, /* NtAddAtom */
	{ 0x0004, 0x0009, 0x000a, 0x000b, 0x000b }, /* NtAdjustGroupsToken */
	{ 0x0005, 0x000a, 0x000b, 0x000c, 0x000c }, /* NtAdjustPrivilegesToken */
	{ 0x0006, 0x000b, 0x000c, 0x000d, 0x000d }, /* NtAlertResumeThread */
	{ 0x0007, 0x000c, 0x000d, 0x000e, 0x000e }, /* NtAlertThread */
	{ 0x0008, 0x000d, 0x000e, 0x000f, 0x000f }, /* NtAllocateLocallyUniqueId */
	{ 0x0009, 0x000f, 0x0010, 0x0011, 0x0011 }, /* NtAllocateUuids */
	{ 0x000a, 0x0010, 0x0011, 0x0012, 0x0012 }, /* NtAllocateVirtualMemory */
	{ 0x000b, 0x0013, 0x0014, 0x0016, 0x002a }, /* NtCallbackReturn */
	{ 0x000c, 0x0014, 0x0016, 0x0018, 0x002c }, /* NtCancelIoFile */
	{ 0x000d, 0x0015, 0x0017, 0x0019, 0x002d }, /* NtCancelTimer */
	{ 0x000e, 0x0017, 0x0018, 0x001a, 0x002e }, /* NtClearEvent */
	{ 0x000f, 0x0018, 0x0019, 0x001b, 0x002f }, /* NtClose */
	{ 0x0010, 0x0019, 0x001a, 0x001c, 0x0030 }, /* NtCloseObjectAuditAlarm */
	{ 0x0011, 0x001a, 0x001d, 0x001f, 0x0033 }, /* NtCompleteConnectPort */
	{ 0x0012, 0x001b, 0x001f, 0x0021, 0x0035 }, /* NtConnectPort */
	{ 0x0013, 0x001c, 0x0020, 0x0022, 0x0036 }, /* NtContinue */
	{ 0x0014, 0x001d, 0x0022, 0x0024, 0x0038 }, /* NtCreateDirectoryObject */
	{ 0x0015, 0x001e, 0x0023, 0x0025, 0x0039 }, /* NtCreateEvent */
	{ 0x0016, 0x001f, 0x0024, 0x0026, 0x003a }, /* NtCreateEventPair */
	{ 0x0017, 0x0020, 0x0025, 0x0027, 0x003b }, /* NtCreateFile */
	{ 0x0018, 0x0021, 0x0026, 0x0028, 0x003c }, /* NtCreateIoCompletion */
	{ 0x0019, 0x0023, 0x0029, 0x002b, 0x003f }, /* NtCreateKey */
	{ 0x001a, 0x0024, 0x002a, 0x002c, 0x0040 }, /* NtCreateMailslotFile */
	{ 0x001b, 0x0025, 0x002b, 0x002d, 0x0041 }, /* NtCreateMutant */
	{ 0x001c, 0x0026, 0x002c, 0x002e, 0x0042 }, /* NtCreateNamedPipeFile */
	{ 0x001d, 0x0027, 0x002d, 0x002f, 0x0044 }, /* NtCreatePagingFile */
	{ 0x001e, 0x0028, 0x002e, 0x0030, 0x0045 }, /* NtCreatePort */
	{ 0x001f, 0x0029, 0x002f, 0x0031, 0x0046 }, /* NtCreateProcess */
	{ 0x0020, 0x002a, 0x0031, 0x0033, 0x0048 }, /* NtCreateProfile */
	{ 0x0021, 0x002b, 0x0032, 0x0034, 0x0049 }, /* NtCreateSection */
	{ 0x0022, 0x002c, 0x0033, 0x0035, 0x004a }, /* NtCreateSemaphore */
	{ 0x0023, 0x002d, 0x0034, 0x0036, 0x004b }, /* NtCreateSymbolicLinkObject */
	{ 0x0024, 0x002e, 0x0035, 0x0037, 0x004c }, /* NtCreateThread */
	{ 0x0025, 0x002f, 0x0036, 0x0038, 0x004d }, /* NtCreateTimer */
	{ 0x0026, 0x0030, 0x0037, 0x0039, 0x004e }, /* NtCreateToken */
	{ 0x0027, 0x0032, 0x003b, 0x003d, 0x0075 }, /* NtDelayExecution */
	{ 0x0028, 0x0033, 0x003c, 0x003e, 0x0076 }, /* NtDeleteAtom */
	{ 0x0029, 0x0034, 0x003e, 0x0041, 0x0079 }, /* NtDeleteFile */
	{ 0x002a, 0x0035, 0x003f, 0x0042, 0x007a }, /* NtDeleteKey */
	{ 0x002b, 0x0036, 0x0040, 0x0043, 0x007c }, /* NtDeleteObjectAuditAlarm */
	{ 0x002c, 0x0037, 0x0041, 0x0044, 0x007d }, /* NtDeleteValueKey */
	{ 0x002d, 0x0038, 0x0042, 0x0045, 0x007e }, /* NtDeviceIoControlFile */
	{ 0x002e, 0x0039, 0x0043, 0x0046, 0x007f }, /* NtDisplayString */
	{ 0x002f, 0x003a, 0x0044, 0x0047, 0x0080 }, /* NtDuplicateObject */
	{ 0x0030, 0x003b, 0x0045, 0x0048, 0x0081 }, /* NtDuplicateToken */
	{ 0x0031, 0x003c, 0x0047, 0x004b, 0x0084 }, /* NtEnumerateKey */
	{ 0x0032, 0x003d, 0x0049, 0x004d, 0x0086 }, /* NtEnumerateValueKey */
	{ 0x0033, 0x003e, 0x004a, 0x004e, 0x0087 }, /* NtExtendSection */
	{ 0x0034, 0x0040, 0x004c, 0x0050, 0x0089 }, /* NtFindAtom */
	{ 0x0035, 0x0041, 0x004d, 0x0051, 0x008a }, /* NtFlushBuffersFile */
	{ 0x0036, 0x0042, 0x004e, 0x0052, 0x008b }, /* NtFlushInstructionCache */
	{ 0x0037, 0x0043, 0x004f, 0x0053, 0x008c }, /* NtFlushKey */
	{ 0x0038, 0x0044, 0x0050, 0x0054, 0x008e }, /* NtFlushVirtualMemory */
	{ 0x0039, 0x0045, 0x0051, 0x0055, 0x008f }, /* NtFlushWriteBuffer */
	{ 0x003a, 0x0047, 0x0053, 0x0057, 0x0091 }, /* NtFreeVirtualMemory */
	{ 0x003b, 0x0048, 0x0054, 0x0058, 0x0094 }, /* NtFsControlFile */
	{ 0x003c, 0x0049, 0x0055, 0x0059, 0x0095 }, /* NtGetContextThread */
	{ 0x003d, 0x004b, 0x0057, 0x005b, 0x0098 }, /* NtGetPlugPlayEvent */
	{ 0x003f, 0x004f, 0x005a, 0x005e, 0x009b }, /* NtImpersonateClientOfPort */
	{ 0x0040, 0x0050, 0x005b, 0x005f, 0x009c }, /* NtImpersonateThread */
	{ 0x0041, 0x0051, 0x005c, 0x0060, 0x009e }, /* NtInitializeRegistry */
	{ 0x0042, 0x0054, 0x0060, 0x0064, 0x00a2 }, /* NtListenPort */
	{ 0x0043, 0x0055, 0x0061, 0x0065, 0x00a3 }, /* NtLoadDriver */
	{ 0x0044, 0x0056, 0x0062, 0x0066, 0x00a4 }, /* NtLoadKey */
	{ 0x0045, 0x0057, 0x0063, 0x0067, 0x00a5 }, /* NtLoadKey2 */
	{ 0x0046, 0x0058, 0x0064, 0x0069, 0x00a7 }, /* NtLockFile */
	{ 0x0047, 0x0059, 0x0067, 0x006c, 0x00aa }, /* NtLockVirtualMemory */
	{ 0x0048, 0x005a, 0x0069, 0x006e, 0x00ac }, /* NtMakeTemporaryObject */
	{ 0x0049, 0x005d, 0x006c, 0x0071, 0x00af }, /* NtMapViewOfSection */
	{ 0x004a, 0x005e, 0x006e, 0x0074, 0x00b2 }, /* NtNotifyChangeDirectoryFile */
	{ 0x004b, 0x005f, 0x006f, 0x0075, 0x00b3 }, /* NtNotifyChangeKey */
	{ 0x004c, 0x0061, 0x0071, 0x0077, 0x00b5 }, /* NtOpenDirectoryObject */
	{ 0x004d, 0x0062, 0x0072, 0x0078, 0x00b6 }, /* NtOpenEvent */
	{ 0x004e, 0x0063, 0x0073, 0x0079, 0x00b7 }, /* NtOpenEventPair */
	{ 0x004f, 0x0064, 0x0074, 0x007a, 0x00b8 }, /* NtOpenFile */
	{ 0x0050, 0x0065, 0x0075, 0x007b, 0x00b9 }, /* NtOpenIoCompletion */
	{ 0x0051, 0x0067, 0x0077, 0x007d, 0x00bb }, /* NtOpenKey */
	{ 0x0052, 0x0068, 0x0078, 0x007e, 0x00bc }, /* NtOpenMutant */
	{ 0x0053, 0x0069, 0x0079, 0x007f, 0x00be }, /* NtOpenObjectAuditAlarm */
	{ 0x0054, 0x006a, 0x007a, 0x0080, 0x00bf }, /* NtOpenProcess */
	{ 0x0055, 0x006b, 0x007b, 0x0081, 0x00c0 }, /* NtOpenProcessToken */
	{ 0x0056, 0x006c, 0x007d, 0x0083, 0x00c2 }, /* NtOpenSection */
	{ 0x0057, 0x006d, 0x007e, 0x0084, 0x00c3 }, /* NtOpenSemaphore */
	{ 0x0058, 0x006e, 0x007f, 0x0085, 0x00c5 }, /* NtOpenSymbolicLinkObject */
	{ 0x0059, 0x006f, 0x0080, 0x0086, 0x00c6 }, /* NtOpenThread */
	{ 0x005a, 0x0070, 0x0081, 0x0087, 0x00c7 }, /* NtOpenThreadToken */
	{ 0x005b, 0x0071, 0x0083, 0x0089, 0x00c9 }, /* NtOpenTimer */
	{ 0x005c, 0x0072, 0x0084, 0x008a, 0x00ca }, /* NtPlugPlayControl */
	{ 0x005d, 0x0074, 0x0086, 0x008c, 0x00cc }, /* NtPrivilegeCheck */
	{ 0x005f, 0x0076, 0x0087, 0x008d, 0x00cd }, /* NtPrivilegeObjectAuditAlarm */
	{ 0x005e, 0x0075, 0x0088, 0x008e, 0x00ce }, /* NtPrivilegedServiceAuditAlarm */
	{ 0x0060, 0x0077, 0x0089, 0x008f, 0x00cf }, /* NtProtectVirtualMemory */
	{ 0x0061, 0x0078, 0x008a, 0x0090, 0x00d0 }, /* NtPulseEvent */
	{ 0x0063, 0x007a, 0x008b, 0x0091, 0x00d1 }, /* NtQueryAttributesFile */
	{ 0x0064, 0x007b, 0x008f, 0x0095, 0x00d5 }, /* NtQueryDefaultLocale */
	{ 0x0065, 0x007d, 0x0091, 0x0097, 0x00d7 }, /* NtQueryDirectoryFile */
	{ 0x0066, 0x007e, 0x0092, 0x0098, 0x00d8 }, /* NtQueryDirectoryObject */
	{ 0x0067, 0x007f, 0x0093, 0x009a, 0x00da }, /* NtQueryEaFile */
	{ 0x0068, 0x0080, 0x0094, 0x009b, 0x00db }, /* NtQueryEvent */
	{ 0x0069, 0x0081, 0x0095, 0x009c, 0x00dc }, /* NtQueryFullAttributesFile */
	{ 0x0062, 0x0079, 0x0096, 0x009d, 0x00dd }, /* NtQueryInformationAtom */
	{ 0x006a, 0x0082, 0x0097, 0x009e, 0x00de }, /* NtQueryInformationFile */
	{ 0x006c, 0x0085, 0x0099, 0x00a0, 0x00e0 }, /* NtQueryInformationPort */
	{ 0x006d, 0x0086, 0x009a, 0x00a1, 0x00e1 }, /* NtQueryInformationProcess */
	{ 0x006e, 0x0087, 0x009b, 0x00a2, 0x00e2 }, /* NtQueryInformationThread */
	{ 0x006f, 0x0088, 0x009c, 0x00a3, 0x00e3 }, /* NtQueryInformationToken */
	{ 0x0070, 0x008a, 0x009e, 0x00a5, 0x00e5 }, /* NtQueryIntervalProfile */
	{ 0x006b, 0x0084, 0x009f, 0x00a6, 0x00e6 }, /* NtQueryIoCompletion */
	{ 0x0071, 0x008b, 0x00a0, 0x00a7, 0x00e7 }, /* NtQueryKey */
	{ 0x0072, 0x008c, 0x00a1, 0x00a8, 0x00e8 }, /* NtQueryMultipleValueKey */
	{ 0x0073, 0x008d, 0x00a2, 0x00a9, 0x00e9 }, /* NtQueryMutant */
	{ 0x0074, 0x008e, 0x00a3, 0x00aa, 0x00ea }, /* NtQueryObject */
	{ 0x0076, 0x0090, 0x00a5, 0x00ad, 0x00ed }, /* NtQueryPerformanceCounter */
	{ 0x0077, 0x0092, 0x00a7, 0x00af, 0x00ef }, /* NtQuerySection */
	{ 0x0078, 0x0093, 0x00a8, 0x00b0, 0x00f0 }, /* NtQuerySecurityObject */
	{ 0x0079, 0x0094, 0x00a9, 0x00b1, 0x00f1 }, /* NtQuerySemaphore */
	{ 0x007a, 0x0095, 0x00aa, 0x00b2, 0x00f2 }, /* NtQuerySymbolicLinkObject */
	{ 0x007b, 0x0096, 0x00ab, 0x00b3, 0x00f3 }, /* NtQuerySystemEnvironmentValue */
	{ 0x007c, 0x0097, 0x00ad, 0x00b5, 0x00f5 }, /* NtQuerySystemInformation */
	{ 0x007d, 0x0098, 0x00ae, 0x00b6, 0x00f6 }, /* NtQuerySystemTime */
	{ 0x007e, 0x0099, 0x00af, 0x00b7, 0x00f7 }, /* NtQueryTimer */
	{ 0x007f, 0x009a, 0x00b0, 0x00b8, 0x00f8 }, /* NtQueryTimerResolution */
	{ 0x0080, 0x009b, 0x00b1, 0x00b9, 0x00f9 }, /* NtQueryValueKey */
	{ 0x0081, 0x009c, 0x00b2, 0x00ba, 0x00fa }, /* NtQueryVirtualMemory */
	{ 0x0082, 0x009d, 0x00b3, 0x00bb, 0x00fb }, /* NtQueryVolumeInformationFile */
	{ 0x0083, 0x009e, 0x00b4, 0x00bc, 0x00fc }, /* NtQueueApcThread */
	{ 0x0084, 0x009f, 0x00b5, 0x00bd, 0x00fd }, /* NtRaiseException */
	{ 0x0085, 0x00a0, 0x00b6, 0x00be, 0x00fe }, /* NtRaiseHardError */
	{ 0x0086, 0x00a1, 0x00b7, 0x00bf, 0x00ff }, /* NtReadFile */
	{ 0x0087, 0x00a2, 0x00b8, 0x00c0, 0x0100 }, /* NtReadFileScatter */
	{ 0x0088, 0x00a3, 0x00b9, 0x00c1, 0x0101 }, /* NtReadRequestData */
	{ 0x0089, 0x00a4, 0x00ba, 0x00c2, 0x0102 }, /* NtReadVirtualMemory */
	{ 0x008a, 0x00a5, 0x00bb, 0x00c3, 0x0103 }, /* NtRegisterThreadTerminatePort */
	{ 0x008b, 0x00a6, 0x00bc, 0x00c4, 0x0104 }, /* NtReleaseMutant */
	{ 0x008c, 0x00a7, 0x00bd, 0x00c5, 0x0105 }, /* NtReleaseSemaphore */
	{ 0x008d, 0x00a8, 0x00be, 0x00c6, 0x0106 }, /* NtRemoveIoCompletion */
	{ 0x008e, 0x00a9, 0x00c1, 0x00c9, 0x0109 }, /* NtReplaceKey */
	{ 0x008f, 0x00aa, 0x00c2, 0x00ca, 0x010a }, /* NtReplyPort */
	{ 0x0090, 0x00ab, 0x00c3, 0x00cb, 0x010b }, /* NtReplyWaitReceivePort */
	{ 0x0091, 0x00ad, 0x00c5, 0x00cd, 0x010d }, /* NtReplyWaitReplyPort */
	{ 0x0092, 0x00af, 0x00c7, 0x00cf, 0x010f }, /* NtRequestPort */
	{ 0x0093, 0x00b0, 0x00c8, 0x00d0, 0x0110 }, /* NtRequestWaitReplyPort */
	{ 0x0094, 0x00b2, 0x00ca, 0x00d2, 0x0112 }, /* NtResetEvent */
	{ 0x0095, 0x00b4, 0x00cc, 0x00d4, 0x0114 }, /* NtRestoreKey */
	{ 0x0096, 0x00b5, 0x00ce, 0x00d6, 0x0116 }, /* NtResumeThread */
	{ 0x0097, 0x00b6, 0x00cf, 0x00d7, 0x0117 }, /* NtSaveKey */
	{ 0x0099, 0x00ba, 0x00d5, 0x00dd, 0x0122 }, /* NtSetContextThread */
	{ 0x009a, 0x00bb, 0x00d7, 0x00df, 0x0124 }, /* NtSetDefaultHardErrorPort */
	{ 0x009b, 0x00bc, 0x00d8, 0x00e0, 0x0125 }, /* NtSetDefaultLocale */
	{ 0x009c, 0x00be, 0x00da, 0x00e3, 0x0128 }, /* NtSetEaFile */
	{ 0x009d, 0x00bf, 0x00db, 0x00e4, 0x0129 }, /* NtSetEvent */
	{ 0x009e, 0x00c0, 0x00dd, 0x00e6, 0x012b }, /* NtSetHighEventPair */
	{ 0x009f, 0x00c1, 0x00de, 0x00e7, 0x012c }, /* NtSetHighWaitLowEventPair */
	{ 0x00a1, 0x00c2, 0x00e0, 0x00e9, 0x012e }, /* NtSetInformationFile */
	{ 0x00a2, 0x00c4, 0x00e2, 0x00eb, 0x0130 }, /* NtSetInformationKey */
	{ 0x00a3, 0x00c5, 0x00e3, 0x00ec, 0x0131 }, /* NtSetInformationObject */
	{ 0x00a4, 0x00c6, 0x00e4, 0x00ed, 0x0132 }, /* NtSetInformationProcess */
	{ 0x00a5, 0x00c7, 0x00e5, 0x00ee, 0x0133 }, /* NtSetInformationThread */
	{ 0x00a6, 0x00c8, 0x00e6, 0x00ef, 0x0134 }, /* NtSetInformationToken */
	{ 0x00a7, 0x00c9, 0x00e7, 0x00f0, 0x0135 }, /* NtSetIntervalProfile */
	{ 0x0098, 0x00b9, 0x00e8, 0x00f1, 0x0136 }, /* NtSetIoCompletion */
	{ 0x00a8, 0x00ca, 0x00e9, 0x00f2, 0x0137 }, /* NtSetLdtEntries */
	{ 0x00a9, 0x00cb, 0x00ea, 0x00f3, 0x0138 }, /* NtSetLowEventPair */
	{ 0x00aa, 0x00cc, 0x00eb, 0x00f4, 0x0139 }, /* NtSetLowWaitHighEventPair */
	{ 0x00ac, 0x00ce, 0x00ed, 0x00f6, 0x013b }, /* NtSetSecurityObject */
	{ 0x00ad, 0x00cf, 0x00ee, 0x00f7, 0x013c }, /* NtSetSystemEnvironmentValue */
	{ 0x00ae, 0x00d0, 0x00f0, 0x00f9, 0x013e }, /* NtSetSystemInformation */
	{ 0x00af, 0x00d1, 0x00f1, 0x00fa, 0x013f }, /* NtSetSystemPowerState */
	{ 0x00b0, 0x00d2, 0x00f2, 0x00fb, 0x0140 }, /* NtSetSystemTime */
	{ 0x00b1, 0x00d4, 0x00f4, 0x00fd, 0x0142 }, /* NtSetTimer */
	{ 0x00b2, 0x00d5, 0x00f5, 0x00fe, 0x0143 }, /* NtSetTimerResolution */
	{ 0x00b3, 0x00d7, 0x00f7, 0x0100, 0x0145 }, /* NtSetValueKey */
	{ 0x00b4, 0x00d8, 0x00f8, 0x0101, 0x0146 }, /* NtSetVolumeInformationFile */
	{ 0x00b5, 0x00d9, 0x00f9, 0x0102, 0x0147 }, /* NtShutdownSystem */
	{ 0x00b6, 0x00da, 0x00fa, 0x0103, 0x0148 }, /* NtSignalAndWaitForSingleObject */
	{ 0x00b7, 0x00db, 0x00fb, 0x0104, 0x0149 }, /* NtStartProfile */
	{ 0x00b8, 0x00dc, 0x00fc, 0x0105, 0x014a }, /* NtStopProfile */
	{ 0x00b9, 0x00dd, 0x00fe, 0x0107, 0x014c }, /* NtSuspendThread */
	{ 0x00ba, 0x00de, 0x00ff, 0x0108, 0x014d }, /* NtSystemDebugControl */
	{ 0x00bb, 0x00e0, 0x0101, 0x010a, 0x014f }, /* NtTerminateProcess */
	{ 0x00bc, 0x00e1, 0x0102, 0x010b, 0x0150 }, /* NtTerminateThread */
	{ 0x00bd, 0x00e2, 0x0103, 0x010c, 0x0151 }, /* NtTestAlert */
	{ 0x00be, 0x00e3, 0x0106, 0x010f, 0x0157 }, /* NtUnloadDriver */
	{ 0x00bf, 0x00e4, 0x0107, 0x0110, 0x0158 }, /* NtUnloadKey */
	{ 0x00c0, 0x00e5, 0x0109, 0x0113, 0x015b }, /* NtUnlockFile */
	{ 0x00c1, 0x00e6, 0x010a, 0x0114, 0x015c }, /* NtUnlockVirtualMemory */
	{ 0x00c2, 0x00e7, 0x010b, 0x0115, 0x015d }, /* NtUnmapViewOfSection */
	{ 0x00c3, 0x00e8, 0x010c, 0x0116, 0x015e }, /* NtVdmControl */
	{ 0x00c4, 0x00e9, 0x010e, 0x0118, 0x0160 }, /* NtWaitForMultipleObjects */
	{ 0x00c5, 0x00ea, 0x010f, 0x0119, 0x0161 }, /* NtWaitForSingleObject */
	{ 0x00c6, 0x00eb, 0x0110, 0x011a, 0x0162 }, /* NtWaitHighEventPair */
	{ 0x00c7, 0x00ec, 0x0111, 0x011b, 0x0163 }, /* NtWaitLowEventPair */
	{ 0x00c8, 0x00ed, 0x0112, 0x011c, 0x0164 }, /* NtWriteFile */
	{ 0x00c9, 0x00ee, 0x0113, 0x011d, 0x0165 }, /* NtWriteFileGather */
	{ 0x00ca, 0x00ef, 0x0114, 0x011e, 0x0166 }, /* NtWriteRequestData */
	{ 0x00cb, 0x00f0, 0x0115, 0x011f, 0x0167 }, /* NtWriteVirtualMemory */
	{ 0x00d3, 0x00f7, 0x0116, 0x0120, 0x0168 }  /* NtYieldExecution */
};
NTSTATUS NTAPI NtAcceptConnectPort( OUT PHANDLE PortHandle, IN PVOID PortIdentifier, IN PPORT_MESSAGE Message, IN BOOLEAN Accept, IN OUT PPORT_VIEW ServerView OPTIONAL, OUT PREMOTE_PORT_VIEW ClientView OPTIONAL ) ;
NTSTATUS NTAPI NtAccessCheck( IN PSECURITY_DESCRIPTOR SecurityDescriptor, IN HANDLE TokenHandle, IN ACCESS_MASK DesiredAccess, IN PGENERIC_MAPPING GenericMapping, OUT PPRIVILEGE_SET PrivilegeSet, IN PULONG PrivilegeSetLength, OUT PACCESS_MASK GrantedAccess, OUT PBOOLEAN AccessStatus ) ;
NTSTATUS NTAPI NtAccessCheckAndAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PVOID HandleId, IN PUNICODE_STRING ObjectTypeName, IN PUNICODE_STRING ObjectName, IN PSECURITY_DESCRIPTOR SecurityDescriptor, IN ACCESS_MASK DesiredAccess, IN PGENERIC_MAPPING GenericMapping, IN BOOLEAN ObjectCreation, OUT PACCESS_MASK GrantedAccess, OUT PBOOLEAN AccessStatus, OUT PBOOLEAN GenerateOnClose ) ;
NTSTATUS NTAPI NtAddAtom( IN PWSTR String, IN ULONG StringLength, OUT PUSHORT Atom ) ;
NTSTATUS NTAPI NtAdjustGroupsToken( IN HANDLE TokenHandle, IN BOOLEAN ResetToDefault, IN PTOKEN_GROUPS NewState, IN ULONG BufferLength, OUT PTOKEN_GROUPS PreviousState OPTIONAL, OUT PULONG ReturnLength ) ;
NTSTATUS NTAPI NtAdjustPrivilegesToken( IN HANDLE TokenHandle, IN BOOLEAN DisableAllPrivileges, IN PTOKEN_PRIVILEGES NewState, IN ULONG BufferLength, OUT PTOKEN_PRIVILEGES PreviousState OPTIONAL, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtAlertResumeThread( IN HANDLE ThreadHandle, OUT PULONG PreviousSuspendCount OPTIONAL ) ;
NTSTATUS NTAPI NtAlertThread( IN HANDLE ThreadHandle ) ;
NTSTATUS NTAPI NtAllocateLocallyUniqueId( OUT PLUID Luid ) ;
NTSTATUS NTAPI NtAllocateUuids( OUT PLARGE_INTEGER UuidLastTimeAllocated, OUT PULONG UuidDeltaTime, OUT PULONG UuidSequenceNumber, OUT PUCHAR UuidSeed ) NTSYSAPI NTSTATUS NTAPI NtAllocateUuids( OUT PLARGE_INTEGER UuidLastTimeAllocated, OUT PULONG UuidDeltaTime, OUT PULONG UuidSequenceNumber ) ;
NTSTATUS NTAPI NtAllocateVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN ULONG ZeroBits, IN OUT PULONG AllocationSize, IN ULONG AllocationType, IN ULONG Protect ) ;
NTSTATUS NTAPI NtCallbackReturn( IN PVOID Result OPTIONAL, IN ULONG ResultLength, IN NTSTATUS Status ) ;
NTSTATUS NTAPI NtCancelIoFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock ) ;
NTSTATUS NTAPI NtCancelTimer( IN HANDLE TimerHandle, OUT PBOOLEAN PreviousState OPTIONAL ) ;
NTSTATUS NTAPI NtClearEvent( IN HANDLE EventHandle ) ;
NTSTATUS NTAPI NtClose( IN HANDLE Handle ) ;
NTSTATUS NTAPI NtCloseObjectAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PVOID HandleId, IN BOOLEAN GenerateOnClose ) ;
NTSTATUS NTAPI NtCompleteConnectPort( IN HANDLE PortHandle ) ;
NTSTATUS NTAPI NtConnectPort( OUT PHANDLE PortHandle, IN PUNICODE_STRING PortName, IN PSECURITY_QUALITY_OF_SERVICE SecurityQos, IN OUT PPORT_VIEW ClientView OPTIONAL, OUT PREMOTE_PORT_VIEW ServerView OPTIONAL, OUT PULONG MaxMessageLength OPTIONAL, IN OUT PVOID ConnectInformation OPTIONAL, IN OUT PULONG ConnectInformationLength OPTIONAL ) ;
NTSTATUS NTAPI NtContinue( IN PCONTEXT Context, IN BOOLEAN TestAlert ) ;
NTSTATUS NTAPI NtCreateDirectoryObject( OUT PHANDLE DirectoryHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtCreateEvent( OUT PHANDLE EventHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN EVENT_TYPE EventType, IN BOOLEAN InitialState ) ;
NTSTATUS NTAPI NtCreateEventPair( OUT PHANDLE EventPairHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtCreateFile( OUT PHANDLE FileHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PLARGE_INTEGER AllocationSize OPTIONAL, IN ULONG FileAttributes, IN ULONG ShareAccess, IN ULONG CreateDisposition, IN ULONG CreateOptions, IN PVOID EaBuffer OPTIONAL, IN ULONG EaLength ) ;
NTSTATUS NTAPI NtCreateIoCompletion( OUT PHANDLE IoCompletionHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN ULONG NumberOfConcurrentThreads ) ;
NTSTATUS NTAPI NtCreateKey( OUT PHANDLE KeyHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN ULONG TitleIndex, IN PUNICODE_STRING Class OPTIONAL, IN ULONG CreateOptions, OUT PULONG Disposition OPTIONAL ) ;
NTSTATUS NTAPI NtCreateMailslotFile( OUT PHANDLE FileHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG CreateOptions, IN ULONG InBufferSize, IN ULONG MaxMessageSize, IN PLARGE_INTEGER ReadTimeout OPTIONAL ) ;
NTSTATUS NTAPI NtCreateMutant( OUT PHANDLE MutantHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN BOOLEAN InitialOwner ) ;
NTSTATUS NTAPI NtCreateNamedPipeFile( OUT PHANDLE FileHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG ShareAccess, IN ULONG CreateDisposition, IN ULONG CreateOptions, IN BOOLEAN TypeMessage, IN BOOLEAN ReadmodeMessage, IN BOOLEAN Nonblocking, IN ULONG MaxInstances, IN ULONG InBufferSize, IN ULONG OutBufferSize, IN PLARGE_INTEGER DefaultTimeout OPTIONAL ) ;
NTSTATUS NTAPI NtCreatePagingFile( IN PUNICODE_STRING FileName, IN PULARGE_INTEGER InitialSize, IN PULARGE_INTEGER MaximumSize, IN ULONG Priority OPTIONAL ) ;
NTSTATUS NTAPI NtCreatePort( OUT PHANDLE PortHandle, IN POBJECT_ATTRIBUTES ObjectAttributes, IN ULONG MaxConnectionInfoLength, IN ULONG MaxMessageLength, IN ULONG MaxPoolUsage ) ;
NTSTATUS NTAPI NtCreateProcess( OUT PHANDLE ProcessHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN HANDLE InheritFromProcessHandle, IN BOOLEAN InheritHandles, IN HANDLE SectionHandle OPTIONAL, IN HANDLE DebugPort OPTIONAL, IN HANDLE ExceptionPort OPTIONAL ) ;
NTSTATUS NTAPI NtCreateProfile( OUT PHANDLE ProfileHandle, IN HANDLE ProcessHandle, IN PVOID Base, IN ULONG Size, IN ULONG BucketShift, IN PULONG Buffer, IN ULONG BufferLength, IN KPROFILE_SOURCE Source, IN ULONG ProcessorMask ) ;
NTSTATUS NTAPI NtCreateSection( OUT PHANDLE SectionHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PLARGE_INTEGER SectionSize OPTIONAL, IN ULONG Protect, IN ULONG Attributes, IN HANDLE FileHandle ) ;
NTSTATUS NTAPI NtCreateSemaphore( OUT PHANDLE SemaphoreHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN LONG InitialCount, IN LONG MaximumCount ) ;
NTSTATUS NTAPI NtCreateSymbolicLinkObject( OUT PHANDLE SymbolicLinkHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PUNICODE_STRING TargetName ) ;
NTSTATUS NTAPI NtCreateThread( OUT PHANDLE ThreadHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN HANDLE ProcessHandle, OUT PCLIENT_ID ClientId, IN PCONTEXT ThreadContext, IN PUSER_STACK UserStack, IN BOOLEAN CreateSuspended ) ;
NTSTATUS NTAPI NtCreateTimer( OUT PHANDLE TimerHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN TIMER_TYPE TimerType ) ;
NTSTATUS NTAPI NtCreateToken( OUT PHANDLE TokenHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN TOKEN_TYPE Type, IN PLUID AuthenticationId, IN PLARGE_INTEGER ExpirationTime, IN PTOKEN_USER User, IN PTOKEN_GROUPS Groups, IN PTOKEN_PRIVILEGES Privileges, IN PTOKEN_OWNER Owner, IN PTOKEN_PRIMARY_GROUP PrimaryGroup, IN PTOKEN_DEFAULT_DACL DefaultDacl, IN PTOKEN_SOURCE Source ) ;
NTSTATUS NTAPI NtDelayExecution( IN BOOLEAN Alertable, IN PLARGE_INTEGER Interval ) ;
NTSTATUS NTAPI NtDeleteAtom( IN USHORT Atom ) ;
NTSTATUS NTAPI NtDeleteFile( IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtDeleteKey( IN HANDLE KeyHandle ) ;
NTSTATUS NTAPI NtDeleteObjectAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PVOID HandleId, IN BOOLEAN GenerateOnClose ) ;
NTSTATUS NTAPI NtDeleteValueKey( IN HANDLE KeyHandle, IN PUNICODE_STRING ValueName ) ;
NTSTATUS NTAPI NtDeviceIoControlFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG IoControlCode, IN PVOID InputBuffer OPTIONAL, IN ULONG InputBufferLength, OUT PVOID OutputBuffer OPTIONAL, IN ULONG OutputBufferLength ) ;
NTSTATUS NTAPI NtDisplayString( IN PUNICODE_STRING String ) ;
NTSTATUS NTAPI NtDuplicateObject( IN HANDLE SourceProcessHandle, IN HANDLE SourceHandle, IN HANDLE TargetProcessHandle, OUT PHANDLE TargetHandle OPTIONAL, IN ACCESS_MASK DesiredAccess, IN ULONG Attributes, IN ULONG Options ) ;
NTSTATUS NTAPI NtDuplicateToken( IN HANDLE ExistingTokenHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN BOOLEAN EffectiveOnly, IN TOKEN_TYPE TokenType, OUT PHANDLE NewTokenHandle ) ;
NTSTATUS NTAPI NtEnumerateKey( IN HANDLE KeyHandle, IN ULONG Index, IN KEY_INFORMATION_CLASS KeyInformationClass, OUT PVOID KeyInformation, IN ULONG KeyInformationLength, OUT PULONG ResultLength ) ;
NTSTATUS NTAPI NtEnumerateValueKey( IN HANDLE KeyHandle, IN ULONG Index, IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, OUT PVOID KeyValueInformation, IN ULONG KeyValueInformationLength, OUT PULONG ResultLength ) ;
NTSTATUS NTAPI NtExtendSection( IN HANDLE SectionHandle, IN PLARGE_INTEGER SectionSize ) ;
NTSTATUS NTAPI NtFindAtom( IN PWSTR String, IN ULONG StringLength, OUT PUSHORT Atom ) ;
NTSTATUS NTAPI NtFlushBuffersFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock ) ;
NTSTATUS NTAPI NtFlushInstructionCache( IN HANDLE ProcessHandle, IN PVOID BaseAddress OPTIONAL, IN ULONG FlushSize ) ;
NTSTATUS NTAPI NtFlushKey( IN HANDLE KeyHandle ) ;
NTSTATUS NTAPI NtFlushVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN OUT PULONG FlushSize, OUT PIO_STATUS_BLOCK IoStatusBlock ) ;
NTSTATUS NTAPI NtFlushWriteBuffer( VOID ) ;
NTSTATUS NTAPI NtFreeVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN OUT PULONG FreeSize, IN ULONG FreeType ) ;
NTSTATUS NTAPI NtFsControlFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG FsControlCode, IN PVOID InputBuffer OPTIONAL, IN ULONG InputBufferLength, OUT PVOID OutputBuffer OPTIONAL, IN ULONG OutputBufferLength ) ;
NTSTATUS NTAPI NtGetContextThread( IN HANDLE ThreadHandle, OUT PCONTEXT Context ) ;
NTSTATUS NTAPI NtGetPlugPlayEvent( IN ULONG Reserved1, IN ULONG Reserved2, OUT PVOID Buffer, IN ULONG BufferLength ) ;
NTSTATUS NTAPI NtImpersonateClientOfPort( IN HANDLE PortHandle, IN PPORT_MESSAGE Message ) ;
NTSTATUS NTAPI NtImpersonateThread( IN HANDLE ThreadHandle, IN HANDLE TargetThreadHandle, IN PSECURITY_QUALITY_OF_SERVICE SecurityQos ) ;
NTSTATUS NTAPI NtInitializeRegistry( IN BOOLEAN Setup ) ;
NTSTATUS NTAPI NtListenPort( IN HANDLE PortHandle, OUT PPORT_MESSAGE Message ) ;
NTSTATUS NTAPI NtLoadDriver( IN PUNICODE_STRING DriverServiceName ) ;
NTSTATUS NTAPI NtLoadKey( IN POBJECT_ATTRIBUTES KeyObjectAttributes, IN POBJECT_ATTRIBUTES FileObjectAttributes ) ;
NTSTATUS NTAPI NtLoadKey2( IN POBJECT_ATTRIBUTES KeyObjectAttributes, IN POBJECT_ATTRIBUTES FileObjectAttributes, IN ULONG Flags ) ;
NTSTATUS NTAPI NtLockFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PULARGE_INTEGER LockOffset, IN PULARGE_INTEGER LockLength, IN ULONG Key, IN BOOLEAN FailImmediately, IN BOOLEAN ExclusiveLock ) ;
NTSTATUS NTAPI NtLockVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN OUT PULONG LockSize, IN ULONG LockType ) ;
NTSTATUS NTAPI NtMakeTemporaryObject( IN HANDLE Handle ) ;
NTSTATUS NTAPI NtMapViewOfSection( IN HANDLE SectionHandle, IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN ULONG ZeroBits, IN ULONG CommitSize, IN OUT PLARGE_INTEGER SectionOffset OPTIONAL, IN OUT PULONG ViewSize, IN SECTION_INHERIT InheritDisposition, IN ULONG AllocationType, IN ULONG Protect ) ;
NTSTATUS NTAPI NtNotifyChangeDirectoryFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PFILE_NOTIFY_INFORMATION Buffer, IN ULONG BufferLength, IN ULONG NotifyFilter, IN BOOLEAN WatchSubtree ) ;
NTSTATUS NTAPI NtNotifyChangeKey( IN HANDLE KeyHandle, IN HANDLE EventHandle OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG NotifyFilter, IN BOOLEAN WatchSubtree, IN PVOID Buffer, IN ULONG BufferLength, IN BOOLEAN Asynchronous ) ;
NTSTATUS NTAPI NtOpenDirectoryObject( OUT PHANDLE DirectoryHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenEvent( OUT PHANDLE EventHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenEventPair( OUT PHANDLE EventPairHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenFile( OUT PHANDLE FileHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PIO_STATUS_BLOCK IoStatusBlock, IN ULONG ShareAccess, IN ULONG OpenOptions ) ;
NTSTATUS NTAPI NtOpenIoCompletion( OUT PHANDLE IoCompletionHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenKey( OUT PHANDLE KeyHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenMutant( OUT PHANDLE MutantHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenObjectAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PVOID *HandleId, IN PUNICODE_STRING ObjectTypeName, IN PUNICODE_STRING ObjectName, IN PSECURITY_DESCRIPTOR SecurityDescriptor, IN HANDLE TokenHandle, IN ACCESS_MASK DesiredAccess, IN ACCESS_MASK GrantedAccess, IN PPRIVILEGE_SET Privileges OPTIONAL, IN BOOLEAN ObjectCreation, IN BOOLEAN AccessGranted, OUT PBOOLEAN GenerateOnClose ) ;
NTSTATUS NTAPI NtOpenProcess( OUT PHANDLE ProcessHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PCLIENT_ID ClientId OPTIONAL ) ;
NTSTATUS NTAPI NtOpenProcessToken( IN HANDLE ProcessHandle, IN ACCESS_MASK DesiredAccess, OUT PHANDLE TokenHandle ) ;
NTSTATUS NTAPI NtOpenSection( OUT PHANDLE SectionHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenSemaphore( OUT PHANDLE SemaphoreHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenSymbolicLinkObject( OUT PHANDLE SymbolicLinkHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtOpenThread( OUT PHANDLE ThreadHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PCLIENT_ID ClientId ) ;
NTSTATUS NTAPI NtOpenThreadToken( IN HANDLE ThreadHandle, IN ACCESS_MASK DesiredAccess, IN BOOLEAN OpenAsSelf, OUT PHANDLE TokenHandle ) ;
NTSTATUS NTAPI NtOpenTimer( OUT PHANDLE TimerHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes ) ;
NTSTATUS NTAPI NtPlugPlayControl( IN ULONG ControlCode, IN OUT PVOID Buffer, IN ULONG BufferLength ) NTSYSAPI NTSTATUS NTAPI NtPlugPlayControl( IN ULONG ControlCode, IN OUT PVOID Buffer, IN ULONG BufferLength, IN PVOID Unknown OPTIONAL ) ;
NTSTATUS NTAPI NtPrivilegeCheck( IN HANDLE TokenHandle, IN PPRIVILEGE_SET RequiredPrivileges, OUT PBOOLEAN Result ) ;
NTSTATUS NTAPI NtPrivilegeObjectAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PVOID HandleId, IN HANDLE TokenHandle, IN ACCESS_MASK DesiredAccess, IN PPRIVILEGE_SET Privileges, IN BOOLEAN AccessGranted ) ;
NTSTATUS NTAPI NtPrivilegedServiceAuditAlarm( IN PUNICODE_STRING SubsystemName, IN PUNICODE_STRING ServiceName, IN HANDLE TokenHandle, IN PPRIVILEGE_SET Privileges, IN BOOLEAN AccessGranted ) ;
NTSTATUS NTAPI NtProtectVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN OUT PULONG ProtectSize, IN ULONG NewProtect, OUT PULONG OldProtect ) ;
NTSTATUS NTAPI NtPulseEvent( IN HANDLE EventHandle, OUT PULONG PreviousState OPTIONAL ) ;
NTSTATUS NTAPI NtQueryAttributesFile( IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PFILE_BASIC_INFORMATION FileInformation ) ;
NTSTATUS NTAPI NtQueryDefaultLocale( IN BOOLEAN ThreadOrSystem, OUT PLCID Locale ) ;
NTSTATUS NTAPI NtQueryDirectoryFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PVOID FileInformation, IN ULONG FileInformationLength, IN FILE_INFORMATION_CLASS FileInformationClass, IN BOOLEAN ReturnSingleEntry, IN PUNICODE_STRING FileName OPTIONAL, IN BOOLEAN RestartScan ) ;
NTSTATUS NTAPI NtQueryDirectoryObject( IN HANDLE DirectoryHandle, OUT PVOID Buffer, IN ULONG BufferLength, IN BOOLEAN ReturnSingleEntry, IN BOOLEAN RestartScan, IN OUT PULONG Context, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryEaFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PFILE_FULL_EA_INFORMATION Buffer, IN ULONG BufferLength, IN BOOLEAN ReturnSingleEntry, IN PFILE_GET_EA_INFORMATION EaList OPTIONAL, IN ULONG EaListLength, IN PULONG EaIndex OPTIONAL, IN BOOLEAN RestartScan ) ;
NTSTATUS NTAPI NtQueryEvent( IN HANDLE EventHandle, IN EVENT_INFORMATION_CLASS EventInformationClass, OUT PVOID EventInformation, IN ULONG EventInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryFullAttributesFile( IN POBJECT_ATTRIBUTES ObjectAttributes, OUT PFILE_NETWORK_OPEN_INFORMATION FileInformation ) ;
NTSTATUS NTAPI NtQueryInformationAtom( IN USHORT Atom, IN ATOM_INFORMATION_CLASS AtomInformationClass, OUT PVOID AtomInformation, IN ULONG AtomInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryInformationFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PVOID FileInformation, IN ULONG FileInformationLength, IN FILE_INFORMATION_CLASS FileInformationClass ) ;
NTSTATUS NTAPI NtQueryInformationPort( IN HANDLE PortHandle, IN PORT_INFORMATION_CLASS PortInformationClass, OUT PVOID PortInformation, IN ULONG PortInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryInformationProcess( IN HANDLE ProcessHandle, IN PROCESSINFOCLASS ProcessInformationClass, OUT PVOID ProcessInformation, IN ULONG ProcessInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryInformationThread( IN HANDLE ThreadHandle, IN THREADINFOCLASS ThreadInformationClass, OUT PVOID ThreadInformation, IN ULONG ThreadInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryInformationToken( IN HANDLE TokenHandle, IN TOKEN_INFORMATION_CLASS TokenInformationClass, OUT PVOID TokenInformation, IN ULONG TokenInformationLength, OUT PULONG ReturnLength ) ;
NTSTATUS NTAPI NtQueryIntervalProfile( IN KPROFILE_SOURCE Source, OUT PULONG Interval ) ;
NTSTATUS NTAPI NtQueryIoCompletion( IN HANDLE IoCompletionHandle, IN IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, OUT PVOID IoCompletionInformation, IN ULONG IoCompletionInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryKey( IN HANDLE KeyHandle, IN KEY_INFORMATION_CLASS KeyInformationClass, OUT PVOID KeyInformation, IN ULONG KeyInformationLength, OUT PULONG ResultLength ) ;
NTSTATUS NTAPI NtQueryMultipleValueKey( IN HANDLE KeyHandle, IN OUT PKEY_VALUE_ENTRY ValueList, IN ULONG NumberOfValues, OUT PVOID Buffer, IN OUT PULONG Length, OUT PULONG ReturnLength ) ;
NTSTATUS NTAPI NtQueryMutant( IN HANDLE MutantHandle, IN MUTANT_INFORMATION_CLASS MutantInformationClass, OUT PVOID MutantInformation, IN ULONG MutantInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryObject( IN HANDLE ObjectHandle, IN OBJECT_INFORMATION_CLASS ObjectInformationClass, OUT PVOID ObjectInformation, IN ULONG ObjectInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryPerformanceCounter( OUT PLARGE_INTEGER PerformanceCount, OUT PLARGE_INTEGER PerformanceFrequency OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySection( IN HANDLE SectionHandle, IN SECTION_INFORMATION_CLASS SectionInformationClass, OUT PVOID SectionInformation, IN ULONG SectionInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySecurityObject( IN HANDLE Handle, IN SECURITY_INFORMATION SecurityInformation, OUT PSECURITY_DESCRIPTOR SecurityDescriptor, IN ULONG SecurityDescriptorLength, OUT PULONG ReturnLength ) ;
NTSTATUS NTAPI NtQuerySemaphore( IN HANDLE SemaphoreHandle, IN SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, OUT PVOID SemaphoreInformation, IN ULONG SemaphoreInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySymbolicLinkObject( IN HANDLE SymbolicLinkHandle, IN OUT PUNICODE_STRING TargetName, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySystemEnvironmentValue( IN PUNICODE_STRING Name, OUT PVOID Value, IN ULONG ValueLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySystemInformation( IN SYSTEM_INFORMATION_CLASS SystemInformationClass, IN OUT PVOID SystemInformation, IN ULONG SystemInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQuerySystemTime( OUT PLARGE_INTEGER CurrentTime ) ;
NTSTATUS NTAPI NtQueryTimer( IN HANDLE TimerHandle, IN TIMER_INFORMATION_CLASS TimerInformationClass, OUT PVOID TimerInformation, IN ULONG TimerInformationLength, OUT PULONG ResultLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryTimerResolution( OUT PULONG CoarsestResolution, OUT PULONG FinestResolution, OUT PULONG ActualResolution ) ;
NTSTATUS NTAPI NtQueryValueKey( IN HANDLE KeyHandle, IN PUNICODE_STRING ValueName, IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, OUT PVOID KeyValueInformation, IN ULONG KeyValueInformationLength, OUT PULONG ResultLength ) ;
NTSTATUS NTAPI NtQueryVirtualMemory( IN HANDLE ProcessHandle, IN PVOID BaseAddress, IN MEMORY_INFORMATION_CLASS MemoryInformationClass, OUT PVOID MemoryInformation, IN ULONG MemoryInformationLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtQueryVolumeInformationFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PVOID VolumeInformation, IN ULONG VolumeInformationLength, IN FS_INFORMATION_CLASS VolumeInformationClass ) ;
NTSTATUS NTAPI NtQueueApcThread( IN HANDLE ThreadHandle, IN PKNORMAL_ROUTINE ApcRoutine, IN PVOID ApcContext OPTIONAL, IN PVOID Argument1 OPTIONAL, IN PVOID Argument2 OPTIONAL ) ;
NTSTATUS NTAPI NtRaiseException( IN PEXCEPTION_RECORD ExceptionRecord, IN PCONTEXT Context, IN BOOLEAN SearchFrames ) ;
NTSTATUS NTAPI NtRaiseHardError( IN NTSTATUS Status, IN ULONG NumberOfArguments, IN ULONG StringArgumentsMask, IN PULONG_PTR Arguments, IN HARDERROR_RESPONSE_OPTION ResponseOption, OUT PHARDERROR_RESPONSE Response ) ;
NTSTATUS NTAPI NtReadFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, OUT PVOID Buffer, IN ULONG Length, IN PLARGE_INTEGER ByteOffset OPTIONAL, IN PULONG Key OPTIONAL ) ;
NTSTATUS NTAPI NtReadFileScatter( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PFILE_SEGMENT_ELEMENT Buffer, IN ULONG Length, IN PLARGE_INTEGER ByteOffset OPTIONAL, IN PULONG Key OPTIONAL ) ;
NTSTATUS NTAPI NtReadRequestData( IN HANDLE PortHandle, IN PPORT_MESSAGE Message, IN ULONG Index, OUT PVOID Buffer, IN ULONG BufferLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtReadVirtualMemory( IN HANDLE ProcessHandle, IN PVOID BaseAddress, OUT PVOID Buffer, IN ULONG BufferLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtRegisterThreadTerminatePort( IN HANDLE PortHandle ) ;
NTSTATUS NTAPI NtReleaseMutant( IN HANDLE MutantHandle, OUT PULONG PreviousState ) ;
NTSTATUS NTAPI NtReleaseSemaphore( IN HANDLE SemaphoreHandle, IN LONG ReleaseCount, OUT PLONG PreviousCount OPTIONAL ) ;
NTSTATUS NTAPI NtRemoveIoCompletion( IN HANDLE IoCompletionHandle, OUT PULONG CompletionKey, OUT PULONG CompletionValue, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PLARGE_INTEGER Timeout OPTIONAL ) ;
NTSTATUS NTAPI NtReplaceKey( IN POBJECT_ATTRIBUTES NewFileObjectAttributes, IN HANDLE KeyHandle, IN POBJECT_ATTRIBUTES OldFileObjectAttributes ) ;
NTSTATUS NTAPI NtReplyPort( IN HANDLE PortHandle, IN PPORT_MESSAGE ReplyMessage ) ;
NTSTATUS NTAPI NtReplyWaitReceivePort( IN HANDLE PortHandle, OUT PULONG PortIdentifier OPTIONAL, IN PPORT_MESSAGE ReplyMessage OPTIONAL, OUT PPORT_MESSAGE Message ) ;
NTSTATUS NTAPI NtReplyWaitReplyPort( IN HANDLE PortHandle, IN OUT PPORT_MESSAGE ReplyMessage ) ;
NTSTATUS NTAPI NtRequestPort( IN HANDLE PortHandle, IN PPORT_MESSAGE RequestMessage ) ;
NTSTATUS NTAPI NtRequestWaitReplyPort( IN HANDLE PortHandle, IN PPORT_MESSAGE RequestMessage, OUT PPORT_MESSAGE ReplyMessage ) ;
NTSTATUS NTAPI NtResetEvent( IN HANDLE EventHandle, OUT PULONG PreviousState OPTIONAL ) ;
NTSTATUS NTAPI NtRestoreKey( IN HANDLE KeyHandle, IN HANDLE FileHandle, IN ULONG Flags ) ;
NTSTATUS NTAPI NtResumeThread( IN HANDLE ThreadHandle, OUT PULONG PreviousSuspendCount OPTIONAL ) ;
NTSTATUS NTAPI NtSaveKey( IN HANDLE KeyHandle, IN HANDLE FileHandle ) ;
NTSTATUS NTAPI NtSetContextThread( IN HANDLE ThreadHandle, IN PCONTEXT Context ) ;
NTSTATUS NTAPI NtSetDefaultHardErrorPort( IN HANDLE PortHandle ) ;
NTSTATUS NTAPI NtSetDefaultLocale( IN BOOLEAN ThreadOrSystem, IN LCID Locale ) ;
NTSTATUS NTAPI NtSetEaFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PFILE_FULL_EA_INFORMATION Buffer, IN ULONG BufferLength ) ;
NTSTATUS NTAPI NtSetEvent( IN HANDLE EventHandle, OUT PULONG PreviousState OPTIONAL ) ;
NTSTATUS NTAPI NtSetHighEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtSetHighWaitLowEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtSetInformationFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PVOID FileInformation, IN ULONG FileInformationLength, IN FILE_INFORMATION_CLASS FileInformationClass ) ;
NTSTATUS NTAPI NtSetInformationKey( IN HANDLE KeyHandle, IN KEY_SET_INFORMATION_CLASS KeyInformationClass, IN PVOID KeyInformation, IN ULONG KeyInformationLength ) ;
NTSTATUS NTAPI NtSetInformationObject( IN HANDLE ObjectHandle, IN OBJECT_INFORMATION_CLASS ObjectInformationClass, IN PVOID ObjectInformation, IN ULONG ObjectInformationLength ) ;
NTSTATUS NTAPI NtSetInformationProcess( IN HANDLE ProcessHandle, IN PROCESSINFOCLASS ProcessInformationClass, IN PVOID ProcessInformation, IN ULONG ProcessInformationLength ) ;
NTSTATUS NTAPI NtSetInformationThread( IN HANDLE ThreadHandle, IN THREADINFOCLASS ThreadInformationClass, IN PVOID ThreadInformation, IN ULONG ThreadInformationLength ) ;
NTSTATUS NTAPI NtSetInformationToken( IN HANDLE TokenHandle, IN TOKEN_INFORMATION_CLASS TokenInformationClass, IN PVOID TokenInformation, IN ULONG TokenInformationLength ) ;
NTSTATUS NTAPI NtSetIntervalProfile( IN ULONG Interval, IN KPROFILE_SOURCE Source ) ;
NTSTATUS NTAPI NtSetIoCompletion( IN HANDLE IoCompletionHandle, IN ULONG CompletionKey, IN ULONG CompletionValue, IN NTSTATUS Status, IN ULONG Information ) ;
NTSTATUS NTAPI NtSetLdtEntries( IN ULONG Selector1, IN LDT_ENTRY LdtEntry1, IN ULONG Selector2, IN LDT_ENTRY LdtEntry2 ) ;
NTSTATUS NTAPI NtSetLowEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtSetLowWaitHighEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtSetSecurityObject( IN HANDLE Handle, IN SECURITY_INFORMATION SecurityInformation, IN PSECURITY_DESCRIPTOR SecurityDescriptor ) ;
NTSTATUS NTAPI NtSetSystemEnvironmentValue( IN PUNICODE_STRING Name, IN PUNICODE_STRING Value ) ;
NTSTATUS NTAPI NtSetSystemInformation( IN SYSTEM_INFORMATION_CLASS SystemInformationClass, IN OUT PVOID SystemInformation, IN ULONG SystemInformationLength ) ;
NTSTATUS NTAPI NtSetSystemPowerState( IN POWER_ACTION SystemAction, IN SYSTEM_POWER_STATE MinSystemState, IN ULONG Flags ) ;
NTSTATUS NTAPI NtSetSystemTime( IN PLARGE_INTEGER NewTime, OUT PLARGE_INTEGER OldTime OPTIONAL ) ;
NTSTATUS NTAPI NtSetTimer( IN HANDLE TimerHandle, IN PLARGE_INTEGER DueTime, IN PTIMER_APC_ROUTINE TimerApcRoutine OPTIONAL, IN PVOID TimerContext, IN BOOLEAN Resume, IN LONG Period, OUT PBOOLEAN PreviousState OPTIONAL ) ;
NTSTATUS NTAPI NtSetTimerResolution( IN ULONG RequestedResolution, IN BOOLEAN Set, OUT PULONG ActualResolution ) ;
NTSTATUS NTAPI NtSetValueKey( IN HANDLE KeyHandle, IN PUNICODE_STRING ValueName, IN ULONG TitleIndex, IN ULONG Type, IN PVOID Data, IN ULONG DataSize ) ;
NTSTATUS NTAPI NtSetVolumeInformationFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PVOID Buffer, IN ULONG BufferLength, IN FS_INFORMATION_CLASS VolumeInformationClass ) ;
NTSTATUS NTAPI NtShutdownSystem( IN SHUTDOWN_ACTION Action ) ;
NTSTATUS NTAPI NtSignalAndWaitForSingleObject( IN HANDLE HandleToSignal, IN HANDLE HandleToWait, IN BOOLEAN Alertable, IN PLARGE_INTEGER Timeout OPTIONAL ) ;
NTSTATUS NTAPI NtStartProfile( IN HANDLE ProfileHandle ) ;
NTSTATUS NTAPI NtStopProfile( IN HANDLE ProfileHandle ) ;
NTSTATUS NTAPI NtSuspendThread( IN HANDLE ThreadHandle, OUT PULONG PreviousSuspendCount OPTIONAL ) ;
NTSTATUS NTAPI NtSystemDebugControl( IN DEBUG_CONTROL_CODE ControlCode, IN PVOID InputBuffer OPTIONAL, IN ULONG InputBufferLength, OUT PVOID OutputBuffer OPTIONAL, IN ULONG OutputBufferLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtTerminateProcess( IN HANDLE ProcessHandle OPTIONAL, IN NTSTATUS ExitStatus ) ;
NTSTATUS NTAPI NtTerminateThread( IN HANDLE ThreadHandle OPTIONAL, IN NTSTATUS ExitStatus ) ;
NTSTATUS NTAPI NtTestAlert( VOID ) ;
NTSTATUS NTAPI NtUnloadDriver( IN PUNICODE_STRING DriverServiceName ) ;
NTSTATUS NTAPI NtUnloadKey( IN POBJECT_ATTRIBUTES KeyObjectAttributes ) ;
NTSTATUS NTAPI NtUnlockFile( IN HANDLE FileHandle, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PULARGE_INTEGER LockOffset, IN PULARGE_INTEGER LockLength, IN ULONG Key ) ;
NTSTATUS NTAPI NtUnlockVirtualMemory( IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN OUT PULONG LockSize, IN ULONG LockType ) ;
NTSTATUS NTAPI NtUnmapViewOfSection( IN HANDLE ProcessHandle, IN PVOID BaseAddress ) ;
NTSTATUS NTAPI NtVdmControl( IN VDMSERVICECLASS Service, IN OUT PVOID ServiceData ) ;
NTSTATUS NTAPI NtWaitForMultipleObjects( IN ULONG HandleCount, IN PHANDLE Handles, IN WAIT_TYPE WaitType, IN BOOLEAN Alertable, IN PLARGE_INTEGER Timeout OPTIONAL ) ;
NTSTATUS NTAPI NtWaitForSingleObject( IN HANDLE Handle, IN BOOLEAN Alertable, IN PLARGE_INTEGER Timeout OPTIONAL ) ;
NTSTATUS NTAPI NtWaitHighEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtWaitLowEventPair( IN HANDLE EventPairHandle ) ;
NTSTATUS NTAPI NtWriteFile( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PVOID Buffer, IN ULONG Length, IN PLARGE_INTEGER ByteOffset OPTIONAL, IN PULONG Key OPTIONAL ) ;
NTSTATUS NTAPI NtWriteFileGather( IN HANDLE FileHandle, IN HANDLE Event OPTIONAL, IN PIO_APC_ROUTINE ApcRoutine OPTIONAL, IN PVOID ApcContext OPTIONAL, OUT PIO_STATUS_BLOCK IoStatusBlock, IN PFILE_SEGMENT_ELEMENT Buffer, IN ULONG Length, IN PLARGE_INTEGER ByteOffset OPTIONAL, IN PULONG Key OPTIONAL ) ;
NTSTATUS NTAPI NtWriteRequestData( IN HANDLE PortHandle, IN PPORT_MESSAGE Message, IN ULONG Index, IN PVOID Buffer, IN ULONG BufferLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtWriteVirtualMemory( IN HANDLE ProcessHandle, IN PVOID BaseAddress, IN PVOID Buffer, IN ULONG BufferLength, OUT PULONG ReturnLength OPTIONAL ) ;
NTSTATUS NTAPI NtYieldExecution( VOID ) ;